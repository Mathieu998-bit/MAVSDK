// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/component_information_server/component_information_server.proto)

#include "component_information_server/component_information_server.grpc.pb.h"
#include "plugins/component_information_server/component_information_server.h"

#include "mavsdk.h"
#include "lazy_plugin.h"
#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<
    typename ComponentInformationServer = ComponentInformationServer,
    typename LazyPlugin = LazyPlugin<ComponentInformationServer>>
class ComponentInformationServerServiceImpl final
    : public rpc::component_information_server::ComponentInformationServerService::Service {
public:
    ComponentInformationServerServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}

    template<typename ResponseType>
    void fillResponseWithResult(
        ResponseType* response, mavsdk::ComponentInformationServer::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_component_information_server_result =
            new rpc::component_information_server::ComponentInformationServerResult();
        rpc_component_information_server_result->set_result(rpc_result);
        std::stringstream ss;
        ss << result;
        rpc_component_information_server_result->set_result_str(ss.str());

        response->set_allocated_component_information_server_result(
            rpc_component_information_server_result);
    }

    static rpc::component_information_server::ComponentInformationServerResult::Result
    translateToRpcResult(const mavsdk::ComponentInformationServer::Result& result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case mavsdk::ComponentInformationServer::Result::Unknown:
                return rpc::component_information_server::
                    ComponentInformationServerResult_Result_RESULT_UNKNOWN;
            case mavsdk::ComponentInformationServer::Result::Success:
                return rpc::component_information_server::
                    ComponentInformationServerResult_Result_RESULT_SUCCESS;
            case mavsdk::ComponentInformationServer::Result::NotFound:
                return rpc::component_information_server::
                    ComponentInformationServerResult_Result_RESULT_NOT_FOUND;
            case mavsdk::ComponentInformationServer::Result::OpenFailure:
                return rpc::component_information_server::
                    ComponentInformationServerResult_Result_RESULT_OPEN_FAILURE;
            case mavsdk::ComponentInformationServer::Result::ReadFailure:
                return rpc::component_information_server::
                    ComponentInformationServerResult_Result_RESULT_READ_FAILURE;
            case mavsdk::ComponentInformationServer::Result::FailedJsonParsing:
                return rpc::component_information_server::
                    ComponentInformationServerResult_Result_RESULT_FAILED_JSON_PARSING;
            case mavsdk::ComponentInformationServer::Result::FailedJsonSchema:
                return rpc::component_information_server::
                    ComponentInformationServerResult_Result_RESULT_FAILED_JSON_SCHEMA;
        }
    }

    static mavsdk::ComponentInformationServer::Result translateFromRpcResult(
        const rpc::component_information_server::ComponentInformationServerResult::Result result)
    {
        switch (result) {
            default:
                LogErr() << "Unknown result enum value: " << static_cast<int>(result);
            // FALLTHROUGH
            case rpc::component_information_server::
                ComponentInformationServerResult_Result_RESULT_UNKNOWN:
                return mavsdk::ComponentInformationServer::Result::Unknown;
            case rpc::component_information_server::
                ComponentInformationServerResult_Result_RESULT_SUCCESS:
                return mavsdk::ComponentInformationServer::Result::Success;
            case rpc::component_information_server::
                ComponentInformationServerResult_Result_RESULT_NOT_FOUND:
                return mavsdk::ComponentInformationServer::Result::NotFound;
            case rpc::component_information_server::
                ComponentInformationServerResult_Result_RESULT_OPEN_FAILURE:
                return mavsdk::ComponentInformationServer::Result::OpenFailure;
            case rpc::component_information_server::
                ComponentInformationServerResult_Result_RESULT_READ_FAILURE:
                return mavsdk::ComponentInformationServer::Result::ReadFailure;
            case rpc::component_information_server::
                ComponentInformationServerResult_Result_RESULT_FAILED_JSON_PARSING:
                return mavsdk::ComponentInformationServer::Result::FailedJsonParsing;
            case rpc::component_information_server::
                ComponentInformationServerResult_Result_RESULT_FAILED_JSON_SCHEMA:
                return mavsdk::ComponentInformationServer::Result::FailedJsonSchema;
        }
    }

    grpc::Status ProvidePeripheralFile(
        grpc::ServerContext* /* context */,
        const rpc::component_information_server::ProvidePeripheralFileRequest* request,
        rpc::component_information_server::ProvidePeripheralFileResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            if (response != nullptr) {
                auto result = mavsdk::ComponentInformationServer::Result::NoSystem;
                fillResponseWithResult(response, result);
            }

            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "ProvidePeripheralFile sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->provide_peripheral_file(request->path());

        if (response != nullptr) {
            fillResponseWithResult(response, result);
        }

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    LazyPlugin& _lazy_plugin;
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk