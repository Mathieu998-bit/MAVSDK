// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: component_information_server/component_information_server.proto

#include "component_information_server/component_information_server.pb.h"
#include "component_information_server/component_information_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace component_information_server {

static const char* ComponentInformationServerService_method_names[] = {
  "/mavsdk.rpc.component_information_server.ComponentInformationServerService/ProvidePeripheralFile",
};

std::unique_ptr< ComponentInformationServerService::Stub> ComponentInformationServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ComponentInformationServerService::Stub> stub(new ComponentInformationServerService::Stub(channel, options));
  return stub;
}

ComponentInformationServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProvidePeripheralFile_(ComponentInformationServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ComponentInformationServerService::Stub::ProvidePeripheralFile(::grpc::ClientContext* context, const ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest& request, ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest, ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProvidePeripheralFile_, context, request, response);
}

void ComponentInformationServerService::Stub::async::ProvidePeripheralFile(::grpc::ClientContext* context, const ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest* request, ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest, ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvidePeripheralFile_, context, request, response, std::move(f));
}

void ComponentInformationServerService::Stub::async::ProvidePeripheralFile(::grpc::ClientContext* context, const ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest* request, ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProvidePeripheralFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse>* ComponentInformationServerService::Stub::PrepareAsyncProvidePeripheralFileRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse, ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProvidePeripheralFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse>* ComponentInformationServerService::Stub::AsyncProvidePeripheralFileRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProvidePeripheralFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

ComponentInformationServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ComponentInformationServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ComponentInformationServerService::Service, ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest, ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ComponentInformationServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest* req,
             ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse* resp) {
               return service->ProvidePeripheralFile(ctx, req, resp);
             }, this)));
}

ComponentInformationServerService::Service::~Service() {
}

::grpc::Status ComponentInformationServerService::Service::ProvidePeripheralFile(::grpc::ServerContext* context, const ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest* request, ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace component_information_server

