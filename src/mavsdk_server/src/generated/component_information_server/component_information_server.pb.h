// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component_information_server/component_information_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace component_information_server {
class ComponentInformationServerResult;
struct ComponentInformationServerResultDefaultTypeInternal;
extern ComponentInformationServerResultDefaultTypeInternal _ComponentInformationServerResult_default_instance_;
class ProvidePeripheralFileRequest;
struct ProvidePeripheralFileRequestDefaultTypeInternal;
extern ProvidePeripheralFileRequestDefaultTypeInternal _ProvidePeripheralFileRequest_default_instance_;
class ProvidePeripheralFileResponse;
struct ProvidePeripheralFileResponseDefaultTypeInternal;
extern ProvidePeripheralFileResponseDefaultTypeInternal _ProvidePeripheralFileResponse_default_instance_;
}  // namespace component_information_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* Arena::CreateMaybeMessage<::mavsdk::rpc::component_information_server::ComponentInformationServerResult>(Arena*);
template<> ::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::component_information_server::ProvidePeripheralFileRequest>(Arena*);
template<> ::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::component_information_server::ProvidePeripheralFileResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace component_information_server {

enum ComponentInformationServerResult_Result : int {
  ComponentInformationServerResult_Result_RESULT_UNKNOWN = 0,
  ComponentInformationServerResult_Result_RESULT_SUCCESS = 1,
  ComponentInformationServerResult_Result_RESULT_NOT_FOUND = 2,
  ComponentInformationServerResult_Result_RESULT_OPEN_FAILURE = 3,
  ComponentInformationServerResult_Result_RESULT_READ_FAILURE = 4,
  ComponentInformationServerResult_Result_RESULT_FAILED_JSON_PARSING = 5,
  ComponentInformationServerResult_Result_RESULT_FAILED_JSON_SCHEMA = 6,
  ComponentInformationServerResult_Result_ComponentInformationServerResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ComponentInformationServerResult_Result_ComponentInformationServerResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ComponentInformationServerResult_Result_IsValid(int value);
constexpr ComponentInformationServerResult_Result ComponentInformationServerResult_Result_Result_MIN = ComponentInformationServerResult_Result_RESULT_UNKNOWN;
constexpr ComponentInformationServerResult_Result ComponentInformationServerResult_Result_Result_MAX = ComponentInformationServerResult_Result_RESULT_FAILED_JSON_SCHEMA;
constexpr int ComponentInformationServerResult_Result_Result_ARRAYSIZE = ComponentInformationServerResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentInformationServerResult_Result_descriptor();
template<typename T>
inline const std::string& ComponentInformationServerResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentInformationServerResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentInformationServerResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentInformationServerResult_Result_descriptor(), enum_t_value);
}
inline bool ComponentInformationServerResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComponentInformationServerResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentInformationServerResult_Result>(
    ComponentInformationServerResult_Result_descriptor(), name, value);
}
// ===================================================================

class ProvidePeripheralFileRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information_server.ProvidePeripheralFileRequest) */ {
 public:
  inline ProvidePeripheralFileRequest() : ProvidePeripheralFileRequest(nullptr) {}
  ~ProvidePeripheralFileRequest() override;
  explicit constexpr ProvidePeripheralFileRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvidePeripheralFileRequest(const ProvidePeripheralFileRequest& from);
  ProvidePeripheralFileRequest(ProvidePeripheralFileRequest&& from) noexcept
    : ProvidePeripheralFileRequest() {
    *this = ::std::move(from);
  }

  inline ProvidePeripheralFileRequest& operator=(const ProvidePeripheralFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvidePeripheralFileRequest& operator=(ProvidePeripheralFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvidePeripheralFileRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvidePeripheralFileRequest* internal_default_instance() {
    return reinterpret_cast<const ProvidePeripheralFileRequest*>(
               &_ProvidePeripheralFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProvidePeripheralFileRequest& a, ProvidePeripheralFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvidePeripheralFileRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvidePeripheralFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvidePeripheralFileRequest* New() const final {
    return new ProvidePeripheralFileRequest();
  }

  ProvidePeripheralFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvidePeripheralFileRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvidePeripheralFileRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvidePeripheralFileRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvidePeripheralFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_information_server.ProvidePeripheralFileRequest";
  }
  protected:
  explicit ProvidePeripheralFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information_server.ProvidePeripheralFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ProvidePeripheralFileResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information_server.ProvidePeripheralFileResponse) */ {
 public:
  inline ProvidePeripheralFileResponse() : ProvidePeripheralFileResponse(nullptr) {}
  ~ProvidePeripheralFileResponse() override;
  explicit constexpr ProvidePeripheralFileResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvidePeripheralFileResponse(const ProvidePeripheralFileResponse& from);
  ProvidePeripheralFileResponse(ProvidePeripheralFileResponse&& from) noexcept
    : ProvidePeripheralFileResponse() {
    *this = ::std::move(from);
  }

  inline ProvidePeripheralFileResponse& operator=(const ProvidePeripheralFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvidePeripheralFileResponse& operator=(ProvidePeripheralFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvidePeripheralFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvidePeripheralFileResponse* internal_default_instance() {
    return reinterpret_cast<const ProvidePeripheralFileResponse*>(
               &_ProvidePeripheralFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProvidePeripheralFileResponse& a, ProvidePeripheralFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvidePeripheralFileResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvidePeripheralFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProvidePeripheralFileResponse* New() const final {
    return new ProvidePeripheralFileResponse();
  }

  ProvidePeripheralFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProvidePeripheralFileResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvidePeripheralFileResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProvidePeripheralFileResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvidePeripheralFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_information_server.ProvidePeripheralFileResponse";
  }
  protected:
  explicit ProvidePeripheralFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentInformationServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.component_information_server.ComponentInformationServerResult component_information_server_result = 1;
  bool has_component_information_server_result() const;
  private:
  bool _internal_has_component_information_server_result() const;
  public:
  void clear_component_information_server_result();
  const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult& component_information_server_result() const;
  PROTOBUF_MUST_USE_RESULT ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* release_component_information_server_result();
  ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* mutable_component_information_server_result();
  void set_allocated_component_information_server_result(::mavsdk::rpc::component_information_server::ComponentInformationServerResult* component_information_server_result);
  private:
  const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult& _internal_component_information_server_result() const;
  ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* _internal_mutable_component_information_server_result();
  public:
  void unsafe_arena_set_allocated_component_information_server_result(
      ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* component_information_server_result);
  ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* unsafe_arena_release_component_information_server_result();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information_server.ProvidePeripheralFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* component_information_server_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ComponentInformationServerResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.component_information_server.ComponentInformationServerResult) */ {
 public:
  inline ComponentInformationServerResult() : ComponentInformationServerResult(nullptr) {}
  ~ComponentInformationServerResult() override;
  explicit constexpr ComponentInformationServerResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentInformationServerResult(const ComponentInformationServerResult& from);
  ComponentInformationServerResult(ComponentInformationServerResult&& from) noexcept
    : ComponentInformationServerResult() {
    *this = ::std::move(from);
  }

  inline ComponentInformationServerResult& operator=(const ComponentInformationServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentInformationServerResult& operator=(ComponentInformationServerResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentInformationServerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentInformationServerResult* internal_default_instance() {
    return reinterpret_cast<const ComponentInformationServerResult*>(
               &_ComponentInformationServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ComponentInformationServerResult& a, ComponentInformationServerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentInformationServerResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentInformationServerResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentInformationServerResult* New() const final {
    return new ComponentInformationServerResult();
  }

  ComponentInformationServerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentInformationServerResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentInformationServerResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ComponentInformationServerResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentInformationServerResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.component_information_server.ComponentInformationServerResult";
  }
  protected:
  explicit ComponentInformationServerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComponentInformationServerResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    ComponentInformationServerResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    ComponentInformationServerResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_NOT_FOUND =
    ComponentInformationServerResult_Result_RESULT_NOT_FOUND;
  static constexpr Result RESULT_OPEN_FAILURE =
    ComponentInformationServerResult_Result_RESULT_OPEN_FAILURE;
  static constexpr Result RESULT_READ_FAILURE =
    ComponentInformationServerResult_Result_RESULT_READ_FAILURE;
  static constexpr Result RESULT_FAILED_JSON_PARSING =
    ComponentInformationServerResult_Result_RESULT_FAILED_JSON_PARSING;
  static constexpr Result RESULT_FAILED_JSON_SCHEMA =
    ComponentInformationServerResult_Result_RESULT_FAILED_JSON_SCHEMA;
  static inline bool Result_IsValid(int value) {
    return ComponentInformationServerResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ComponentInformationServerResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ComponentInformationServerResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ComponentInformationServerResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ComponentInformationServerResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ComponentInformationServerResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return ComponentInformationServerResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result_str();
  PROTOBUF_MUST_USE_RESULT std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.component_information_server.ComponentInformationServerResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result result() const;
  void set_result(::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result value);
  private:
  ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.component_information_server.ComponentInformationServerResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProvidePeripheralFileRequest

// string path = 1;
inline void ProvidePeripheralFileRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& ProvidePeripheralFileRequest::path() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.ProvidePeripheralFileRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProvidePeripheralFileRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.ProvidePeripheralFileRequest.path)
}
inline std::string* ProvidePeripheralFileRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.ProvidePeripheralFileRequest.path)
  return _s;
}
inline const std::string& ProvidePeripheralFileRequest::_internal_path() const {
  return path_.Get();
}
inline void ProvidePeripheralFileRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProvidePeripheralFileRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProvidePeripheralFileRequest::release_path() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.ProvidePeripheralFileRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProvidePeripheralFileRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.ProvidePeripheralFileRequest.path)
}

// -------------------------------------------------------------------

// ProvidePeripheralFileResponse

// .mavsdk.rpc.component_information_server.ComponentInformationServerResult component_information_server_result = 1;
inline bool ProvidePeripheralFileResponse::_internal_has_component_information_server_result() const {
  return this != internal_default_instance() && component_information_server_result_ != nullptr;
}
inline bool ProvidePeripheralFileResponse::has_component_information_server_result() const {
  return _internal_has_component_information_server_result();
}
inline void ProvidePeripheralFileResponse::clear_component_information_server_result() {
  if (GetArenaForAllocation() == nullptr && component_information_server_result_ != nullptr) {
    delete component_information_server_result_;
  }
  component_information_server_result_ = nullptr;
}
inline const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult& ProvidePeripheralFileResponse::_internal_component_information_server_result() const {
  const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* p = component_information_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult&>(
      ::mavsdk::rpc::component_information_server::_ComponentInformationServerResult_default_instance_);
}
inline const ::mavsdk::rpc::component_information_server::ComponentInformationServerResult& ProvidePeripheralFileResponse::component_information_server_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.ProvidePeripheralFileResponse.component_information_server_result)
  return _internal_component_information_server_result();
}
inline void ProvidePeripheralFileResponse::unsafe_arena_set_allocated_component_information_server_result(
    ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* component_information_server_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_information_server_result_);
  }
  component_information_server_result_ = component_information_server_result;
  if (component_information_server_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.component_information_server.ProvidePeripheralFileResponse.component_information_server_result)
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* ProvidePeripheralFileResponse::release_component_information_server_result() {
  
  ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* temp = component_information_server_result_;
  component_information_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* ProvidePeripheralFileResponse::unsafe_arena_release_component_information_server_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.ProvidePeripheralFileResponse.component_information_server_result)
  
  ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* temp = component_information_server_result_;
  component_information_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* ProvidePeripheralFileResponse::_internal_mutable_component_information_server_result() {
  
  if (component_information_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::component_information_server::ComponentInformationServerResult>(GetArenaForAllocation());
    component_information_server_result_ = p;
  }
  return component_information_server_result_;
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* ProvidePeripheralFileResponse::mutable_component_information_server_result() {
  ::mavsdk::rpc::component_information_server::ComponentInformationServerResult* _msg = _internal_mutable_component_information_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.ProvidePeripheralFileResponse.component_information_server_result)
  return _msg;
}
inline void ProvidePeripheralFileResponse::set_allocated_component_information_server_result(::mavsdk::rpc::component_information_server::ComponentInformationServerResult* component_information_server_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete component_information_server_result_;
  }
  if (component_information_server_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::mavsdk::rpc::component_information_server::ComponentInformationServerResult>::GetOwningArena(component_information_server_result);
    if (message_arena != submessage_arena) {
      component_information_server_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_information_server_result, submessage_arena);
    }
    
  } else {
    
  }
  component_information_server_result_ = component_information_server_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.ProvidePeripheralFileResponse.component_information_server_result)
}

// -------------------------------------------------------------------

// ComponentInformationServerResult

// .mavsdk.rpc.component_information_server.ComponentInformationServerResult.Result result = 1;
inline void ComponentInformationServerResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result ComponentInformationServerResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result >(result_);
}
inline ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result ComponentInformationServerResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result)
  return _internal_result();
}
inline void ComponentInformationServerResult::_internal_set_result(::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result value) {
  
  result_ = value;
}
inline void ComponentInformationServerResult::set_result(::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result)
}

// string result_str = 2;
inline void ComponentInformationServerResult::clear_result_str() {
  result_str_.ClearToEmpty();
}
inline const std::string& ComponentInformationServerResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
  return _internal_result_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentInformationServerResult::set_result_str(ArgT0&& arg0, ArgT... args) {
 
 result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
}
inline std::string* ComponentInformationServerResult::mutable_result_str() {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
  return _s;
}
inline const std::string& ComponentInformationServerResult::_internal_result_str() const {
  return result_str_.Get();
}
inline void ComponentInformationServerResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComponentInformationServerResult::_internal_mutable_result_str() {
  
  return result_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComponentInformationServerResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
  return result_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComponentInformationServerResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.component_information_server.ComponentInformationServerResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace component_information_server
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result>() {
  return ::mavsdk::rpc::component_information_server::ComponentInformationServerResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_5finformation_5fserver_2fcomponent_5finformation_5fserver_2eproto
